// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: recommendations_api/recommendations_api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RecommendationsAPI_AddInstance_FullMethodName       = "/collector.RecommendationsAPI/AddInstance"
	RecommendationsAPI_GetRecommendation_FullMethodName = "/collector.RecommendationsAPI/GetRecommendation"
)

// RecommendationsAPIClient is the client API for RecommendationsAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecommendationsAPIClient interface {
	AddInstance(ctx context.Context, in *AddInstanceRequest, opts ...grpc.CallOption) (*AddInstanceResponse, error)
	GetRecommendation(ctx context.Context, in *GetRecommendationRequest, opts ...grpc.CallOption) (*GetRecommendationResponse, error)
}

type recommendationsAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewRecommendationsAPIClient(cc grpc.ClientConnInterface) RecommendationsAPIClient {
	return &recommendationsAPIClient{cc}
}

func (c *recommendationsAPIClient) AddInstance(ctx context.Context, in *AddInstanceRequest, opts ...grpc.CallOption) (*AddInstanceResponse, error) {
	out := new(AddInstanceResponse)
	err := c.cc.Invoke(ctx, RecommendationsAPI_AddInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendationsAPIClient) GetRecommendation(ctx context.Context, in *GetRecommendationRequest, opts ...grpc.CallOption) (*GetRecommendationResponse, error) {
	out := new(GetRecommendationResponse)
	err := c.cc.Invoke(ctx, RecommendationsAPI_GetRecommendation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecommendationsAPIServer is the server API for RecommendationsAPI service.
// All implementations must embed UnimplementedRecommendationsAPIServer
// for forward compatibility
type RecommendationsAPIServer interface {
	AddInstance(context.Context, *AddInstanceRequest) (*AddInstanceResponse, error)
	GetRecommendation(context.Context, *GetRecommendationRequest) (*GetRecommendationResponse, error)
	mustEmbedUnimplementedRecommendationsAPIServer()
}

// UnimplementedRecommendationsAPIServer must be embedded to have forward compatible implementations.
type UnimplementedRecommendationsAPIServer struct {
}

func (UnimplementedRecommendationsAPIServer) AddInstance(context.Context, *AddInstanceRequest) (*AddInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInstance not implemented")
}
func (UnimplementedRecommendationsAPIServer) GetRecommendation(context.Context, *GetRecommendationRequest) (*GetRecommendationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendation not implemented")
}
func (UnimplementedRecommendationsAPIServer) mustEmbedUnimplementedRecommendationsAPIServer() {}

// UnsafeRecommendationsAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecommendationsAPIServer will
// result in compilation errors.
type UnsafeRecommendationsAPIServer interface {
	mustEmbedUnimplementedRecommendationsAPIServer()
}

func RegisterRecommendationsAPIServer(s grpc.ServiceRegistrar, srv RecommendationsAPIServer) {
	s.RegisterService(&RecommendationsAPI_ServiceDesc, srv)
}

func _RecommendationsAPI_AddInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationsAPIServer).AddInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationsAPI_AddInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationsAPIServer).AddInstance(ctx, req.(*AddInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendationsAPI_GetRecommendation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationsAPIServer).GetRecommendation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendationsAPI_GetRecommendation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationsAPIServer).GetRecommendation(ctx, req.(*GetRecommendationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecommendationsAPI_ServiceDesc is the grpc.ServiceDesc for RecommendationsAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecommendationsAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collector.RecommendationsAPI",
	HandlerType: (*RecommendationsAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddInstance",
			Handler:    _RecommendationsAPI_AddInstance_Handler,
		},
		{
			MethodName: "GetRecommendation",
			Handler:    _RecommendationsAPI_GetRecommendation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recommendations_api/recommendations_api.proto",
}
