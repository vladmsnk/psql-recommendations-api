// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: environment/environment.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Environment_GetStates_FullMethodName        = "/collector.Environment/GetStates"
	Environment_ApplyActions_FullMethodName     = "/collector.Environment/ApplyActions"
	Environment_GetRewardMetrics_FullMethodName = "/collector.Environment/GetRewardMetrics"
	Environment_InitEnvironment_FullMethodName  = "/collector.Environment/InitEnvironment"
)

// EnvironmentClient is the client API for Environment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvironmentClient interface {
	GetStates(ctx context.Context, in *GetStatesRequest, opts ...grpc.CallOption) (*GetStatesResponse, error)
	ApplyActions(ctx context.Context, in *ApplyActionsRequest, opts ...grpc.CallOption) (*ApplyActionsResponse, error)
	GetRewardMetrics(ctx context.Context, in *GetRewardMetricsRequest, opts ...grpc.CallOption) (*GetRewardMetricsResponse, error)
	InitEnvironment(ctx context.Context, in *InitEnvironmentRequest, opts ...grpc.CallOption) (*InitEnvironmentResponse, error)
}

type environmentClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvironmentClient(cc grpc.ClientConnInterface) EnvironmentClient {
	return &environmentClient{cc}
}

func (c *environmentClient) GetStates(ctx context.Context, in *GetStatesRequest, opts ...grpc.CallOption) (*GetStatesResponse, error) {
	out := new(GetStatesResponse)
	err := c.cc.Invoke(ctx, Environment_GetStates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentClient) ApplyActions(ctx context.Context, in *ApplyActionsRequest, opts ...grpc.CallOption) (*ApplyActionsResponse, error) {
	out := new(ApplyActionsResponse)
	err := c.cc.Invoke(ctx, Environment_ApplyActions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentClient) GetRewardMetrics(ctx context.Context, in *GetRewardMetricsRequest, opts ...grpc.CallOption) (*GetRewardMetricsResponse, error) {
	out := new(GetRewardMetricsResponse)
	err := c.cc.Invoke(ctx, Environment_GetRewardMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentClient) InitEnvironment(ctx context.Context, in *InitEnvironmentRequest, opts ...grpc.CallOption) (*InitEnvironmentResponse, error) {
	out := new(InitEnvironmentResponse)
	err := c.cc.Invoke(ctx, Environment_InitEnvironment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvironmentServer is the server API for Environment service.
// All implementations must embed UnimplementedEnvironmentServer
// for forward compatibility
type EnvironmentServer interface {
	GetStates(context.Context, *GetStatesRequest) (*GetStatesResponse, error)
	ApplyActions(context.Context, *ApplyActionsRequest) (*ApplyActionsResponse, error)
	GetRewardMetrics(context.Context, *GetRewardMetricsRequest) (*GetRewardMetricsResponse, error)
	InitEnvironment(context.Context, *InitEnvironmentRequest) (*InitEnvironmentResponse, error)
	mustEmbedUnimplementedEnvironmentServer()
}

// UnimplementedEnvironmentServer must be embedded to have forward compatible implementations.
type UnimplementedEnvironmentServer struct {
}

func (UnimplementedEnvironmentServer) GetStates(context.Context, *GetStatesRequest) (*GetStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStates not implemented")
}
func (UnimplementedEnvironmentServer) ApplyActions(context.Context, *ApplyActionsRequest) (*ApplyActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyActions not implemented")
}
func (UnimplementedEnvironmentServer) GetRewardMetrics(context.Context, *GetRewardMetricsRequest) (*GetRewardMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardMetrics not implemented")
}
func (UnimplementedEnvironmentServer) InitEnvironment(context.Context, *InitEnvironmentRequest) (*InitEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitEnvironment not implemented")
}
func (UnimplementedEnvironmentServer) mustEmbedUnimplementedEnvironmentServer() {}

// UnsafeEnvironmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvironmentServer will
// result in compilation errors.
type UnsafeEnvironmentServer interface {
	mustEmbedUnimplementedEnvironmentServer()
}

func RegisterEnvironmentServer(s grpc.ServiceRegistrar, srv EnvironmentServer) {
	s.RegisterService(&Environment_ServiceDesc, srv)
}

func _Environment_GetStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServer).GetStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Environment_GetStates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServer).GetStates(ctx, req.(*GetStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Environment_ApplyActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServer).ApplyActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Environment_ApplyActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServer).ApplyActions(ctx, req.(*ApplyActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Environment_GetRewardMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRewardMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServer).GetRewardMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Environment_GetRewardMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServer).GetRewardMetrics(ctx, req.(*GetRewardMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Environment_InitEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServer).InitEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Environment_InitEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServer).InitEnvironment(ctx, req.(*InitEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Environment_ServiceDesc is the grpc.ServiceDesc for Environment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Environment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collector.Environment",
	HandlerType: (*EnvironmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStates",
			Handler:    _Environment_GetStates_Handler,
		},
		{
			MethodName: "ApplyActions",
			Handler:    _Environment_ApplyActions_Handler,
		},
		{
			MethodName: "GetRewardMetrics",
			Handler:    _Environment_GetRewardMetrics_Handler,
		},
		{
			MethodName: "InitEnvironment",
			Handler:    _Environment_InitEnvironment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "environment/environment.proto",
}
